/// <reference types="node" />
import { ProtoFab } from './models/ProtoFab';
import { ConfigTypes } from './constants';
export interface PluginArgs {
    [arg_name: string]: any;
}
export interface BuildConfig {
    [plugin_name: string]: PluginArgs;
}
export declare type FabSettings = {
    [var_name: string]: string | boolean | string[];
};
export declare type DeployConfig = {
    'cf-workers'?: ConfigTypes.CFWorkers;
    'aws-lambda-edge'?: ConfigTypes.AwsLambda;
    'aws-s3'?: ConfigTypes.AwsS3;
};
export declare type DeployProviders = keyof DeployConfig;
export interface FabConfig {
    plugins: BuildConfig;
    settings?: {
        [env_name: string]: FabSettings;
    };
    deploy?: DeployConfig;
}
export interface PluginMetadataContent {
    [metadata_name: string]: any;
}
export interface PluginMetadata {
    [plugin_name: string]: PluginMetadataContent;
}
export declare type LoadedPlugin = {
    plugin_name: string;
    plugin_args: PluginArgs;
    builder: FabBuildStep | undefined;
    runtime: string | undefined;
};
export declare type RuntimePlugin = {
    plugin_args: PluginArgs;
    runtime: string;
};
export declare type FabBuildStep<T extends PluginArgs = PluginArgs, U extends PluginMetadata = PluginMetadata> = (args: T, proto_fab: ProtoFab<U>, config_path: string, skip_cache?: boolean) => Promise<void | RuntimePlugin[]>;
export declare type FabResponderMutableContext = {
    [key: string]: any;
};
export declare type Cookies = {
    [key: string]: string;
};
export declare type FabResponderArgs = {
    request: Request;
    settings: FabSettings;
    url: URL;
    context: FabResponderMutableContext;
    cookies: Cookies;
};
export declare type FabRequestResponder = (context: FabResponderArgs) => Promise<undefined | Request | Response | Directive>;
export declare type MatchParams = {
    [match_name: string]: string;
};
export declare type FabRequestResponderWithParams = (contextWithParams: FabResponderArgs & {
    params: MatchParams;
}) => ReturnType<FabRequestResponder>;
export declare type ResponseInterceptor = (response: Response) => Promise<Response>;
export declare type Directive = {
    interceptResponse?: ResponseInterceptor;
    replaceRequest?: Request;
};
export declare type FabFilesObject = {
    [k: string]: string;
};
export declare type FabFiles = Map<string, Buffer>;
export declare type FabFileMetadata = {
    [filename: string]: {
        content_type: string;
        content_length: number;
    };
};
export declare type FabMetadata = {
    file_metadata: FabFileMetadata;
    plugin_metadata: PluginMetadata;
};
export declare type FabCacheValue = string | number | ArrayBuffer | ReadableStream;
export declare type FabCache = {
    set: (key: string, value: FabCacheValue, ttl_seconds?: number) => Promise<void>;
    setJSON: (key: string, value: any, ttl_seconds?: number) => Promise<void>;
    get: (key: string) => Promise<string | undefined>;
    getJSON: (key: string) => Promise<any | undefined>;
    getNumber: (key: string) => Promise<number | undefined>;
    getArrayBuffer: (key: string) => Promise<ArrayBuffer | undefined>;
    getStream: (key: string) => Promise<ReadableStream | undefined>;
};
export declare type FABServerContext = {
    bundle_id: string;
    cache?: FabCache;
};
export declare type ServerConstructor = (filename: string, args: ServerArgs) => ServerType;
export interface ServerType {
    serve(runtimeType: SandboxType, watch: boolean, proxyWs: string | undefined): Promise<void>;
}
export declare type ServerArgs = {
    port: string;
    cert: string | undefined;
    key: string | undefined;
    env: string | undefined;
    config: string;
};
export declare enum SandboxType {
    v8isolate = 0,
    nodeVm = 1
}
export declare type FabSpecRender = (request: Request, settings: FabSettings) => Promise<Request | Response>;
export declare type FabSpecMetadata = {
    production_settings: FabSettings;
    fab_version: string;
};
export declare type FabSpecExports = {
    render: FabSpecRender;
    metadata: FabSpecMetadata;
    initialize: (server_context: FABServerContext) => void;
};
export declare type FetchApi = (url: string | Request, init?: RequestInit) => Promise<Response>;
export declare type FabServerDeployer<T extends ConfigTypes.Union> = (fab_path: string, working_dir: string, config: T, env_overrides: FabSettings, assets_url: string) => Promise<string | string[]>;
export declare type FabAssetsDeployer<T extends ConfigTypes.Union> = (fab_path: string, working_dir: string, config: T) => Promise<string>;
export declare type FabDeployer<T extends ConfigTypes.Union> = (fab_path: string, working_dir: string, config: T, env_overrides: FabSettings) => Promise<string | string[]>;
export declare type FabDeployerExports<T extends ConfigTypes.Union> = {
    deployServer?: FabServerDeployer<T>;
    deployAssets?: FabAssetsDeployer<T>;
    deployBoth?: FabDeployer<T>;
};
export declare type FabPackager<T extends ConfigTypes.Union> = (fab_path: string, package_path: string, config: T, env_overrides: FabSettings, assets_url: string) => Promise<void>;
export declare type FabPackagerExports<T extends ConfigTypes.Union> = {
    createPackage: FabPackager<T>;
};
export interface JSON5ConfigI {
    data: FabConfig;
    str_contents: string;
    write(file_path: string): Promise<void>;
}
export declare type PackageFn = (file_path: string, config: FabConfig, target: DeployProviders, output_path: string | undefined, assets_url: string, env: string | undefined) => Promise<void>;
export declare type DeployFn = (config: JSON5ConfigI, file_path: string, package_dir: string, server_host: DeployProviders | undefined, assets_host: DeployProviders | undefined, env: string | undefined, assets_only: boolean, assets_already_deployed_at: string | undefined, auto_install: boolean) => Promise<string | string[]>;
export declare type BuildFn = (config_path: string, config: FabConfig, skip_cache: boolean, skip_typecheck: boolean, minify: boolean) => Promise<void>;
export declare type FabActionsExports = {
    Packager: {
        package: PackageFn;
    };
    Deployer: {
        deploy: DeployFn;
    };
    Builder: {
        build: BuildFn;
    };
};
export declare type FabServerExports = {
    createServer: ServerConstructor;
};
